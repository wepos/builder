NAME_PR = a.out;	// одно слово
{ один блок выполнения может быть много блок начинается со слова FOLDER и кончается либо концом файла либо  словом FOLDER после которого идет цифра 
	NAME_PR = libft.a;  
	FOLDER1 = src; 		// одна папка или ничего рекурсивно обходим внутренние папки (сканируется если ли в текущем каталоге папки с именем  src srcs sources source если нет то поле остается пустое)
	IGNORE_FILE = ;		// много фалов или ничего (по умолчанию ничего)
	COMPILED_FILES = ;	// много файлов или ничего (если есть в текущем каталоке файлы с расширением .c .cpp если есть и те и другие спросить что именно добавить все или одно из двух)
	INCLUDES_DIR = ;	// много папок или ничего (сканируется если ли в текущем каталоге папки с именем include includes inc если нет то остается пустым)
	INCLUDES_FILE = ;	// много фалов или ничего (в текущем каталоге ищем фалы с раширением .h)
	IGNORE_INC_FILE = ;		// много фалов или ничего (по умолчанию ничего)
	COMPILER = g++;		// только один компилятор (определяется при сканировании если мы нашли только файлы .c то gcc если нашли .срр nj g++)
	FLAGS_FIL = -g;		// много флагов или ничего (по умолчанию ничего)
	FLAGS_PR = ;		// много или ничего (по умолчанию ничего)
	OUTPUT_DIR = ;		// одна папка (по умолчанию текущая)
}
1 рекурсивно обходим папку FOLDER1 создаем список имен файлов вида ./FOLDER1/file.c или ./FOLDER1/dir/file.c
2 одноврменно с проходом проверяется есть ли такая папка и такой объектник, если есть то и сравнивается дата создания файла .o с датой последнего изменения .c
2.1 если нет папки то создается дерево папок mkdir object ; mkdir object/dir ; ....
2.2 если папка есть но дата меньше то переходим в эту папку и запускаем команду "COMPILER FLAGS_FIL -I INCLUDES_DIR -I INCLUDES_FILE -c ../../FOLDER1/dir/file.c "
2.3 если дата равна то переходим к следующему файлу 
